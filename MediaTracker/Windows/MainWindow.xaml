<controls:MetroWindow x:Class="MediaTracker.MainWindow"
                      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                      xmlns:controls="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"
                      xmlns:ignore="http://www.openxmlformats.org/ignore"
                      xmlns:local="clr-namespace:MediaTracker"
                      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                      xmlns:usercontrol="clr-namespace:MediaTracker.Controls"
                      x:Name="Main"
                      Title="Media Tracker"
                      Width="563.667"
                      Height="370"
                      MinWidth="575"
                      MinHeight="350"
                      Background="{DynamicResource WindowBackgroundBrush}"
                      BorderThickness="1"
                      GlowBrush="{DynamicResource AccentColorBrush}"
                      Loaded="MainWindow_Loaded"
                      TextOptions.TextFormattingMode="Display"
                      TextOptions.TextRenderingMode="ClearType"
                      TitleCaps="False"
                      Unloaded="MainWindow_Unloaded"
                      WindowStartupLocation="CenterScreen"
                      WindowTransitionsEnabled="False"
                      mc:Ignorable="ignore">


    <!--  Windowbar Buttons  -->
    <controls:MetroWindow.RightWindowCommands>
        <controls:WindowCommands HorizontalContentAlignment="Right" VerticalContentAlignment="Center">
            <Button Click="BtnUser_Click" Content="User" />
            <Button Click="BtnInbox_Click" Content="Inbox" />
            <Button Click="BtnSettings_Click" Content="Settings" />
        </controls:WindowCommands>
    </controls:MetroWindow.RightWindowCommands>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="40" />
            <RowDefinition />
        </Grid.RowDefinitions>

        <!--  Top Panel  -->
        <Grid Margin="0,0,0.333,0"
              Panel.ZIndex="1"
              Background="{DynamicResource WindowTitleColorBrush}">
            <!--
                Defined window background as a dynamic resource
                that changes depending on the theme that user selects
            -->

            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="2*" MinWidth="16" />
                <ColumnDefinition MinWidth="150" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition />
                <RowDefinition Height="26" />
                <RowDefinition />
            </Grid.RowDefinitions>

            <!--  Search textbox and button  -->
            <!--  Search textbox uses the same watermark technique I shown on Login.xaml  -->
            <Grid Grid.Row="1"
                  Grid.RowSpan="2"
                  Margin="0,0.333,0,7">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition />
                    <ColumnDefinition />
                    <ColumnDefinition />
                </Grid.ColumnDefinitions>
                <Button x:Name="BtnMovies"
                        Width="70"
                        MaxWidth="70"
                        Margin="5,0"
                        Click="BtnMovies_Click"
                        Content="Movies"
                        FontStretch="Expanded"
                        RenderTransformOrigin="0.5,0.5" />
                <Button x:Name="BtnTv"
                        Grid.Column="1"
                        Width="70"
                        MaxWidth="70"
                        Margin="5,0"
                        Click="BtnTv_Click"
                        Content="TV" />
                <Button x:Name="BtnBooks"
                        Grid.Column="2"
                        Width="70"
                        MaxWidth="70"
                        Margin="5,0"
                        Click="BtnBooks_Click"
                        Content="Books" />
                <Button x:Name="BtnAddEntry"
                        Grid.Column="3"
                        Width="70"
                        MaxWidth="70"
                        Margin="5,0"
                        Click="BtnAddEntry_Click"
                        Content="New" />
            </Grid>

            <TextBox x:Name="TxtSearch"
                     Grid.Row="1"
                     Grid.RowSpan="2"
                     Grid.Column="2"
                     Height="25"
                     MinHeight="25"
                     MaxHeight="25"
                     Margin="0,0,0,7"
                     VerticalAlignment="Center"
                     VerticalContentAlignment="Center" />
            <TextBlock Grid.Row="1"
                       Grid.RowSpan="2"
                       Grid.Column="2"
                       MinHeight="25"
                       MaxHeight="25"
                       Margin="5,0,0,-2"
                       VerticalAlignment="Center"
                       Foreground="DarkGray"
                       IsHitTestVisible="False"
                       Text="Search...">
                <TextBlock.Style>
                    <Style TargetType="{x:Type TextBlock}">
                        <Setter Property="Visibility" Value="Collapsed" />
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Text, ElementName=TxtSearch}" Value="">
                                <Setter Property="Visibility" Value="Visible" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </TextBlock.Style>
            </TextBlock>

            <!--
                The following SplitButton control is something I created myself
                I needed a button that had a dropdown to change what the button did
                which only existed in libraries that cost thousands of pound.
                So I managed to make one by creating a UserControl that did what
                I needed
            -->
            <controls:SplitButton x:Name="SplitButtonSearch"
                                  Grid.Row="1"
                                  Grid.RowSpan="2"
                                  Grid.Column="3"
                                  MaxHeight="25"
                                  Margin="5,0.333,10.333,7"
                                  Click="Search_Click"
                                  SelectedIndex="0">
                <controls:SplitButton.ItemTemplate>
                    <DataTemplate>
                        <Grid>
                            <TextBlock HorizontalAlignment="Left"
                                       VerticalAlignment="Center"
                                       Text="{Binding Text}"
                                       TextWrapping="Wrap" />
                        </Grid>
                    </DataTemplate>
                </controls:SplitButton.ItemTemplate>
            </controls:SplitButton>
            <!--  Top Button Menu  -->
        </Grid>

        <!--  Tab Menu  -->
        <Grid Name="GridTabs" Grid.Row="1">
            <TabControl x:Name="TabMenu">

                <!--  Movies  -->
                <TabItem x:Name="TabMovies"
                         Width="Auto"
                         HorizontalAlignment="Stretch"
                         HorizontalContentAlignment="Stretch"
                         Background="{x:Null}"
                         Header="Movies">
                    <Grid Width="Auto"
                          HorizontalAlignment="Stretch"
                          VerticalAlignment="Stretch">

                        <!--
                            I have put most of the program in separate user controls
                            because it lets me embed what would normally be a separate window, into
                            one super window of such, giving a more fluid program AND lets me
                            reuse it to a whole new degree that otherwise wouldn't be easy
                            such as having a single control that displays the media, reused
                            several times, needing nothing but the MediaType to be passed in
                            to return the correct content
                        -->

                        <usercontrol:MediaTypes x:Name="DbDisplayMovies" MediaType="Movie" />
                    </Grid>
                </TabItem>

                <!--  TV  -->
                <TabItem x:Name="TabTv"
                         Width="Auto"
                         HorizontalAlignment="Stretch"
                         HorizontalContentAlignment="Stretch"
                         Background="{x:Null}"
                         Header="TV">
                    <Grid Width="Auto"
                          HorizontalAlignment="Stretch"
                          VerticalAlignment="Stretch">
                        <usercontrol:MediaTypes x:Name="DbDisplayTelevision" MediaType="Series" />
                    </Grid>
                </TabItem>

                <!--  Books  -->
                <TabItem x:Name="TabBooks"
                         Background="{x:Null}"
                         Header="Books">
                    <Grid Width="Auto"
                          HorizontalAlignment="Stretch"
                          VerticalAlignment="Stretch">
                        <usercontrol:MediaTypes x:Name="DbDisplayBook" MediaType="Book" />
                    </Grid>
                </TabItem>

                <!--  New Entry showing an instance of the ShowMedia user control I created  -->
                <TabItem x:Name="TabAddEntry"
                         Background="{x:Null}"
                         Header="New Entry">
                    <local:ShowMedia x:Name="MediaControl"
                                     Width="Auto"
                                     Height="Auto"
                                     VerticalAlignment="Top" />
                </TabItem>

                <!--  User tab showing an instance of the User Profile control I created  -->
                <TabItem x:Name="TabUser" Header="User">
                    <TabControl>
                        <TabItem Header="Profile">
                            <Grid Background="{x:Null}">
                                <local:UserProfile /> 
                                <!--  Profile control  -->
                            </Grid>
                        </TabItem>
                        <TabItem Header="Search">
                            <Grid Background="{x:Null}">
                                <local:ListUsers />  
                                <!--  ListUSers controls  -->
                            </Grid>
                        </TabItem>
                    </TabControl>

                </TabItem>

                <!--  Settings tab showing an instance of the Settings control I created  -->
                <TabItem x:Name="TabSettings"
                         Background="{x:Null}"
                         Header="Settings">
                    <local:Settings />
                </TabItem>

                <TabItem x:Name="TabRecommendations"
                         Background="{x:Null}"
                         Header="Inbox">

                    <TabControl>
                        <TabItem Background="{x:Null}" Header="Recommendations">
                            <usercontrol:Recommendations />
                        </TabItem>

                        <TabItem Background="{x:Null}" Header="Top 10">
                            <usercontrol:PopularItems />
                        </TabItem>

                    </TabControl>

                </TabItem>

            </TabControl>
        </Grid>

        <!--
            This grid is hidden, but when shown, is directly above the first grid.
            So I can display a control (or window of such in my cases) on top of the MainWindow
            class, without having it opened as a new separate window
        -->
        <Grid Name="GridPopup"
              Grid.Row="1"
              Visibility="Collapsed" />
    </Grid>

</controls:MetroWindow>